# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
# с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, matr):
        self.matr = matr

    def __str__(self):
        return '\n'.join(map(str, self.matr))

    def __add__(self, other):
        matr_sum = []
        for i in range(len(self.matr)):
            matr_sum.append([])
            for j in range(len(self.matr[0])):
                matr_sum[i].append(self.matr[i][j] + other.matr[i][j])
        return '\n'.join(map(str, matr_sum))

matrix_1 = Matrix([[1, 2], [3, 4]])

matrix_2 = Matrix([[5, 6], [7, 8]])

print(f'Матрица 1:\n{matrix_1}\n')
print(f'Матрица 2:\n{matrix_2}\n')
print(f'Сумма Матрицы 1 и Матрицы 2:\n{matrix_1 + matrix_2}')


# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы:
# для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod

class Clothes(ABC):
    result = 0

    def __init__(self, parameter):
        self.parameter = parameter

    @property
    @abstractmethod
    def outgo(self):
        pass

    def __add__(self, other):
        Clothes.result += self.outgo + other.outgo
        return Costume(0)

    def __str__(self):
        res = Clothes.result
        Clothes.result = 0
        return f'Общий раход ткани для таких параметров: {res:.2f}'

class Coat(Clothes):
    @property
    def outgo(self):
        return self.parameter / 6.5 + 0.5

class Costume(Clothes):
    @property
    def outgo(self):
        return 2 * self.parameter / 100 + 0.3

coat = Coat(50)
costume = Costume(176)

print(coat + costume)


# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, unit):
        self.unit = unit

    def __str__(self):
        return f'{self.unit}'

    def make_order(self, number_a_row):
        return '\n'.join(['*' * number_a_row for _ in range(self.unit // number_a_row)]) + '\n' + '*' * (self.unit % number_a_row)

    def __add__(self, other):
        print('Сложение: ')
        return Cell(self.unit + other.unit)

    def __sub__(self, other):
        if self.unit > other.unit:
            print('Вычитание: ')
            return Cell(self.unit - other.unit)
        else:
            print('Операцию вычитания можно выполнять только если разность количества ячеек двух клеток больше нуля!')

    def __mul__(self, other):
        print('Умножение: ')
        return Cell(self.unit * other.unit)

    def __floordiv__(self, other):
        print('Целочисленное деление: ')
        return Cell(self.unit // other.unit)


cell_1 = Cell(18)
cell_2 = Cell (15)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)
print('_____')
print(cell_1.make_order(5))
print('_____')
print(cell_2.make_order(4))